// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  userId Int @id @default(autoincrement()) @map("userId")
  email String @unique @map("email")
  password String @map("password")

  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  UserInfo UserInfo?
  TokenStorage TokenStorage?
  Resume Resume[]

@@map("Users")
}

model UserInfo{
  infoId Int @id @default(autoincrement()) @map("infoId")
  authorId Int @unique @map("authorId")
  name String @map("name")
  role Role @default(APPLICANT)

  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  author Users @relation(fields:[authorId], references:[userId], onDelete:Cascade)

@@map("UserInfo")
}

model Resume{
  resumeId Int @id @default(autoincrement()) @map("resumeId")
  authorId Int @map("authorId")
  title String @map("title")
  introduce String @db.Text @map("introduce")
  status Status @default(APPLY) @map("status")

  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  author Users @relation(fields:[authorId], references:[userId], onDelete:Cascade)
  ResumeHistories ResumeHistories[]

@@map("Resume")
}

model ResumeHistories{
  resumeHistoryId Int @id @default(autoincrement()) @map("resumeHistoryId")
  ResumeId Int @map("ResumeId")
  modifier Int @map("modifier")
  oldStatus String? @map("oldStatus")
  newStatus String? @map("newStatus")
  reason String @map("reason")

  createdAt DateTime @default(now()) @map("createdAt")

  Resume Resume @relation(fields:[ResumeId], references:[resumeId], onDelete:Cascade)

@@map("ResumeHistories")
}

model TokenStorage{
  TokenId Int @id @default(autoincrement()) @map("TokenId")
  authorId Int @unique @map("authorId")
  RefreshToken String @map("RefreshToken")

  author Users @relation(fields:[authorId], references:[userId], onDelete:Cascade)

@@map("TokenStorage")
}

enum Role{
  APPLICANT
  RECRUITER
}

enum Status{
  APPLY
  DROP
  PASS
  INTERVIEW1
  INTERVIEW2
  FINAL_PASS
}