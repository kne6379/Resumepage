// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String
  role      Role     @default(APPLICANT)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  refreshToken    RefreshToken?
  resumeHistories ResumeHistories[]
  resume          Resume[]

  @@map("users")
}

model Resume {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  title     String
  introduce String   @db.Text
  status    Status   @default(APPLY)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user            Users             @relation(fields: [userId], references: [id], onDelete: Cascade)
  resumeHistories ResumeHistories[]

  @@map("resumes")
}

model ResumeHistories {
  id          Int      @id @default(autoincrement())
  resumeId    Int      @map("resume_id")
  recruiterId Int      @map("recruiter_id")
  oldStatus   Status   @map("old_status")
  newStatus   Status   @map("new_status")
  reason      String
  createdAt   DateTime @default(now()) @map("created_at")

  resume Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  user   Users  @relation(fields: [recruiterId], references: [id], onDelete: Cascade)

  @@map("resume_histories")
}

model RefreshToken {
  id           Int      @id @default(autoincrement())
  userId       Int      @unique @map("user_id")
  RefreshToken String?  @map("refresh_token")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  user Users @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_token")
}

enum Role {
  APPLICANT
  RECRUITER
}

enum Status {
  APPLY
  DROP
  PASS
  INTERVIEW1
  INTERVIEW2
  FINAL_PASS
}
